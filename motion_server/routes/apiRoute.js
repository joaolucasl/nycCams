var tracker   = require("../serverjs/src/motionTracker.js")
var validator = require("../serverjs/src/interfaceHandler.js");
var auth      = require("../serverjs/src/auth.js");

const BAD_REQUEST_HTML_CODE = validator.BAD_REQUEST_HTML_CODE;
const INTERAL_ERROR_HTML_CODE = 500;
const JSON_MESSAGE_FIELD = "message";

/**
 * Simply answers the request with a bad request code and a JSON
 * containning the field JSON_MESSAGE_FIELD and the argument ad content.
 * @param  {express.response} res The response object generated by express.
 * @param  {string} msg The message to be sent to the client.
 * @return {nothing}     -
 */
function sendBadRequestResponse(res, msg) {
    var json = {}
    json[JSON_MESSAGE_FIELD] = msg;

    res.json(BAD_REQUEST_HTML_CODE, json);
}

/**
 * Simply answers the request with an internal error code and a JSON
 * containning the field JSON_MESSAGE_FIELD and the argument ad content.
 * @param  {express.response} res The response object generated by express.
 * @param  {string} msg The message to be sent to the client.
 * @return {nothing}     -
 */
function sendErrorRequestResponse(res, msg) {
    var json = {}
    json[JSON_MESSAGE_FIELD] = msg;

    res.json(INTERAL_ERROR_HTML_CODE, json);
}

/**
 * Handles an incoming POST request. The request must contain the fields apiID
 * and camIds, which is simply a string with comma-separated IDs. The response
 * is a JSON object containin as key the formal camera ID and the amount of cars
 * in motion in its location.
 * @param  {express.request}   req  A request object created by express.
 * @param  {express.response}  res  A response object created by express
 * @param  {function} next not used.
 * @return {nothing}
 */
function artistRoute(req, res, next) {
    var apiID = req.body.api;

    if (!auth.isValid(apiID))
        sendBadRequestResponse(res, "Invalid API ID.");
    else {
        var validIds = validator.parseCameraNumbers(req.body.camIds)

        if (validIds[0] == validator.BAD_REQUEST_HTML_CODE)
            sendBadRequestResponse(res, "Invalid camera ID.");
        else {
            tracker.jsonMultipleStreets_promise(validIds)
            .then(function (json) {
                res.json(200, json);
            }).fail(function (err) {
                sendErrorRequestResponse("An internal error has happened.")
            }).done();
        }
    }
}

module.exports.route = artistRoute;
